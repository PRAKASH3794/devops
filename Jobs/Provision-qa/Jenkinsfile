pipeline {
    agent { 
        label 'master' 
    }
    tools {
        maven 'maven'
        jdk 'JAVA_HOME'
    }
	options {
        timestamps()
        skipDefaultCheckout() 
    }
    stages {
        stage("Checkout SCM") {
            steps {
			    cleanWs()
			    echo 'checkout scm'
			    checkout scm
		    }
	    }
        			
		stage('Build and Package (with code quality check)') {
			steps {
				echo 'Clean Build'
				sh "mvn clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false"
                archiveArtifacts artifacts: 'target/*.war'
			}
		}
		
		stage('Spin new Developer QA Environment with Tomcat 8') {
			steps {
                script {
                    sh ''' cd Jobs/Provision-qa
                    touch ${WORKSPACE}/server-ip.txt
                    terraform init
                    terraform plan
                    terraform apply --auto-approve
                    terraform output -raw server-public-dns > ${WORKSPACE}/server-ip.txt
                    '''
                    def ret = sh(script: 'cat ${WORKSPACE}/server-ip.txt', returnStdout: true)
                    env.serverIP = ret
                    echo "${env.serverIP}"
			    }
            }
		}

        stage('Deploy war file to tomcat container') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'AWS_SERVER', variable: 'AWS_SERVER_KEY')]) {
                        echo 'copy war file to container'
                        echo "$env.serverIP"
                        sh 'cp "\$AWS_SERVER_KEY" .'
                        sh 'chmod 400 aws_prakash.pem'
                        echo 'Wait for 2 minutes for spinning up of Tomcat server'
                        sh 'sleep 120'
                        sh "ssh-keyscan -H ${env.serverIP} >> ~/.ssh/known_hosts"
                        sh "scp -i aws_prakash.pem -r target/*.war ubuntu@${env.serverIP}:/var/lib/tomcat9/webapps"
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'JENKINS PIPELINE'
        }
        success {
            echo 'JENKINS PIPELINE SUCCESSFUL'
        }
        failure {
            echo 'JENKINS PIPELINE FAILED'
        }
        unstable {
            echo 'JENKINS PIPELINE WAS MARKED AS UNSTABLE'
        }
        changed {
            echo 'JENKINS PIPELINE STATUS HAS CHANGED SINCE LAST EXECUTION'
        }
    }
}
